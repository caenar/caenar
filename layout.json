[
  {
    "type": "grid",
    "items": [
      {
        "type": "section",
        "items": [
          {
            "type": "heading",
            "level": 3,
            "content": "Project Overview"
          },
          {
            "type": "text",
            "content": "Ranyak is a lightweight web application deployed to the Internet Computer Protocol (ICP) network. Built during a developer event, the project explores decentralized app development using Motoko canisters and React for a simple board message feature."
          }
        ]
      },
      {
        "card": true,
        "type": "stack",
        "items": [
          {
            "type": "heading",
            "level": 4,
            "content": "Project Details"
          },
          {
            "type": "text",
            "content": "Duration: 1 day"
          },
          {
            "type": "separator",
            "direction": "x"
          },
          {
            "type": "text",
            "content": "Team: Solo project"
          },
          {
            "type": "separator",
            "direction": "x"
          },
          {
            "type": "text",
            "content": "Role: Designer & Developer"
          },
          {
            "type": "separator",
            "direction": "x"
          },
          {
            "type": "text",
            "content": "Category: Web Application"
          }
        ],
        "minWidth": "350px"
      }
    ],
    "gridOptions": {
      "columns": "repeat(2, fit-content(100%))"
    }
  },
  {
    "type": "grid",
    "items": [
      {
        "type": "stack",
        "items": [
          {
            "icon": {
              "name": "copy-x",
              "color": "#b83e3e"
            },
            "type": "heading",
            "level": 4,
            "content": "The Challenge"
          },
          {
            "type": "text",
            "content": "Ranyak was a spontaneous project I built during a DevCon event on deploying to the Internet Computer Protocol (ICP). I had nothing prepared and had to set up DFX and tooling on Fedora, which made things tricky since most of the docs assumed Windows + WSL. While others were still setting up, I started exploring how DFX, Motoko, and canisters worked together."
          }
        ]
      },
      {
        "type": "separator",
        "direction": "y"
      },
      {
        "type": "stack",
        "items": [
          {
            "icon": {
              "name": "lightbulb",
              "color": "#dbc179"
            },
            "type": "heading",
            "level": 4,
            "content": "The Solution"
          },
          {
            "type": "text",
            "content": "I first explored an official Motoko starter to understand how canisters manage state. Then I created my own app using DFX with a React frontend and Motoko backend. I wrote simple logic to add, get, remove, and reset messages â€” all stored in the canister, no external DB. It was my first real dive into Motoko and gave me hands-on insight into how state and deployment work in the ICP ecosystem."
          }
        ]
      }
    ],
    "gridOptions": {
      "columns": "1fr fit-content(100%) 1fr"
    }
  }
]
